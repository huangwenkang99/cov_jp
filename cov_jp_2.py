# -*- coding: utf-8 -*-
"""cov-jp_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1he0z-aJvys5FGIX62I2K-PW8rax0O0R1
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
from google.colab import drive
drive.mount('/content/drive')
# Load the datasets
vaccination_data = pd.read_csv('/content/drive/MyDrive/colabnotebooks/yearly_vaccination_totals.csv')
confirmed_cases_data = pd.read_csv('/content/drive/MyDrive/colabnotebooks/yearly_confirmed_cases.csv')
economic_data = pd.read_csv('/content/drive/MyDrive/colabnotebooks/reshaped_economic_data.csv')

# Identify and remove duplicates in the economic data
economic_data = economic_data.drop_duplicates(subset=['Year', 'Series Name'])

# Pivot the economic data to have one column for each 'Series Name'
economic_data_pivot = economic_data.pivot(index='Year', columns='Series Name', values='Value').reset_index()

# Merging the datasets based on 'Year'
merged_data = pd.merge(pd.merge(vaccination_data, confirmed_cases_data, on='Year'), economic_data_pivot, on='Year')

# Handling missing values: Replace ".." with NaN and then use forward fill for simplicity
merged_data.replace('..', np.nan, inplace=True)
merged_data = merged_data.ffill()

# Convert all columns to numeric where applicable
merged_data = merged_data.apply(pd.to_numeric, errors='ignore')

# Filter data for the years 2021 to 2023 (actual data)
filtered_data = merged_data[(merged_data['Year'] >= 2021) & (merged_data['Year'] <= 2023)]

# Prepare data for comparison plots (actual)
unemployment_rate = filtered_data['Unemployment, total (% of total labor force) (national estimate)']
gdp_growth_rate = filtered_data['GDP growth (annual %)']
confirmed_rate = filtered_data['ALL']  # Assuming 'ALL' represents the confirmed cases rate

# Print actual GDP growth rate, actual unemployment rate, and actual confirmed cases rate
print("Actual Values (2021-2023):")
for year, gdp, unemp, conf in zip(filtered_data['Year'], gdp_growth_rate, unemployment_rate, confirmed_rate):
    print(f"Year: {year}")
    print(f"  Actual GDP Growth Rate: {gdp:.2f}%")
    print(f"  Actual Unemployment Rate: {unemp:.2f}%")
    print(f"  Actual Confirmed Cases: {conf}\n")

# Plot 1: Actual GDP Growth Rate and Unemployment Rate vs. Actual Confirmed Rate (2021-2023)
plt.figure(figsize=(14, 12))

plt.subplot(2, 1, 1)
plt.plot(filtered_data['Year'], gdp_growth_rate, marker='o', linestyle='-', label='Actual GDP Growth Rate', color='red')
plt.plot(filtered_data['Year'], unemployment_rate, marker='x', linestyle='--', label='Actual Unemployment Rate', color='blue')
plt.title('Actual GDP Growth Rate and Unemployment Rate (2021-2023)')
plt.xlabel('Year')
plt.ylabel('Rate (%)')
plt.legend()
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(filtered_data['Year'], confirmed_rate, marker='s', linestyle='--', label='Actual Confirmed Rate', color='green')
plt.title('Actual Confirmed Case Rate (2021-2023)')
plt.xlabel('Year')
plt.ylabel('Confirmed Rate')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Prepare the model for prediction (using 2021-2023 data)
X = filtered_data[['Unemployment, total (% of total labor force) (national estimate)', 'ALL']]
y = gdp_growth_rate

model = LinearRegression()
model.fit(X, y)

# Predicting GDP growth rate, unemployment rate, and confirmed rate for future years (2024-2026)
future_unemployment_rates = np.array([2.5, 2.6, 2.7])  # Example future values
future_confirmed_rates = np.array([1e6, 1.1e6, 1.2e6])  # Example future values, replace with realistic data

future_data = pd.DataFrame({
    'Unemployment, total (% of total labor force) (national estimate)': future_unemployment_rates,
    'ALL': future_confirmed_rates
})

gdp_forecasts = model.predict(future_data)

# Displaying the predicted results
predicted_df = pd.DataFrame({
    'Year': [2024, 2025, 2026],
    'Predicted GDP Growth Rate': gdp_forecasts,
    'Predicted Unemployment Rate': future_unemployment_rates,
    'Predicted Confirmed Rate': future_confirmed_rates
})

print("Predicted Values for 2024-2026:")
for i, row in predicted_df.iterrows():
    print(f"Year: {row['Year']}")
    print(f"  Predicted GDP Growth Rate: {row['Predicted GDP Growth Rate']:.2f}%")
    print(f"  Predicted Unemployment Rate: {row['Predicted Unemployment Rate']:.2f}%")
    print(f"  Predicted Confirmed Cases: {row['Predicted Confirmed Rate']}\n")

# Plotting the predictions in two groups

# Group 1: Forecasted GDP Growth Rate and Unemployment Rate
plt.figure(figsize=(14, 12))

plt.subplot(2, 1, 1)
plt.plot(predicted_df['Year'], predicted_df['Predicted GDP Growth Rate'], marker='o', linestyle='-', label='Forecasted GDP Growth Rate', color='red')
plt.plot(predicted_df['Year'], predicted_df['Predicted Unemployment Rate'], marker='x', linestyle='--', label='Forecasted Unemployment Rate', color='blue')
plt.title('Forecasted GDP Growth Rate and Unemployment Rate (2024-2026)')
plt.xlabel('Year')
plt.ylabel('Rate (%)')
plt.legend()
plt.grid(True)

# Group 2: Forecasted Confirmed Rate
plt.subplot(2, 1, 2)
plt.plot(predicted_df['Year'], predicted_df['Predicted Confirmed Rate'], marker='s', linestyle='--', label='Forecasted Confirmed Rate', color='green')
plt.title('Forecasted Confirmed Case Rate (2024-2026)')
plt.xlabel('Year')
plt.ylabel('Confirmed Rate')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()